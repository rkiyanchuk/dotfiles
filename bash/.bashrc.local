# In order to keep distribution-specific sensible default Bash configuration,
# user's configuration extends default `.bashrc`.
# Add `source ${HOME}/.bashrc.local` to default `.bashrc` to activate.

MACOS="darwin*"
LINUX="linux-gnu"

HISTTIMEFORMAT="%d.%m.%y %T "  # Store date and time in Bash history.
HISTSIZE=10000
HISTFILESIZE=10000
HISTCONTROL=ignoreboth:erasedups  # Remove duplicates from Bash history.

export TERM=xterm-256color
export EDITOR="nvim"
export GPG_TTY=$(tty)
export GOPATH="$HOME/.go"
export QT_LOGGING_RULES="qt5ct.debug=false"  # https://superuser.com/a/1308321/173270

export PATH="$HOME/.local/bin:$PATH"  # Scripts installed by pip (Python).
export PATH="$HOME/.poetry/bin:$PATH"  # Scripts installed by poetry (Python).
export PATH="$HOME/.cargo/bin:$PATH"  # Binaries installed by cargo (Rust).
export PATH="$HOME/node_modules/.bin:$PATH"  # Scripts installed by NodeJS.
export PATH="$HOME/.go/bin:$PATH"  # Binaries installed by Go (GoLang).

if [ -x /usr/bin/dircolors ]; then
    eval $(dircolors $HOME/.dircolors/dircolors.nord)
fi

stty -ixon  # Enable backward history search with C-s.
shopt -s histappend
shopt -s checkwinsize

if [[ $OSTYPE == $LINUX ]]; then
    shopt -s autocd  # Auto append cd to directory
    source /usr/share/git/completion/git-prompt.sh
fi

if [[ $OSTYPE == $MACOS ]]; then
    export CLICOLOR=1

    export PATH="$HOME/Library/Python/3.7/bin:$PATH"  # Scripts installed by pip (Python) on macOS.
    export PATH="/usr/local/opt/llvm/bin:$PATH"  # LLVM and Clang binaries.

    source /usr/local/lib/python3.7/site-packages/pew/shell_config/init.bash

    if [ -f /usr/local/etc/bash_completion ]; then
        # Source completion for programs installed via Homebrew.
        source /usr/local/etc/bash_completion
    fi

    GIT_COMPLETION="/Applications/Xcode.app/Contents/Developer/usr/share/git-core/git-completion.bash"
    GIT_PROMPT="/Applications/Xcode.app/Contents/Developer/usr/share/git-core/git-prompt.sh"
    if [ -f ${GIT_COMPLETION} ]; then source ${GIT_COMPLETION}; fi
    if [ -f ${GIT_PROMPT} ]; then source ${GIT_PROMPT}; fi
fi

_pip_completion()
{
  COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                 COMP_CWORD=$COMP_CWORD \
                 PIP_AUTO_COMPLETE=1 $1 ) )
}
complete -o default -F _pip_completion pip


# ALIASES
# =======

alias ..='cd ../'
alias dud='du -hd1'
alias pyclean="find . \( -name \*.pyc -o -name \*.pyo -o -name __pycache__ \) -delete"
alias vim="nvim"
alias vimdiff="nvim -d"

if [[ $OSTYPE == $LINUX ]]; then
    alias ls='ls --color=auto'
    alias l='ls -hl --color=auto'
    alias ll='ls -Ahl --color=auto'
    alias open='mimeo'
    alias gvim="nvim-qt"
fi

if [[ $OSTYPE == $MACOS ]]; then
    alias l='ls -hl'
    alias ll='ls -Ahl'
    alias updatedb="sudo /usr/libexec/locate.updatedb"
    alias ctags="/usr/local/bin/ctags"
    alias gvim='f(){ nohup nvim-qt "$@" > /dev/null &  unset -f f; }; f'
fi


# PROMPT
# ======

# Color codes
RESET="\[\033[0;0m\]"
BOLD="\[\033[0;1m\]"
UNDERLINE="\[\033[0;4m\]"
GREY="\[\033[0;30m\]"
RED="\[\033[0;31m\]"
GREEN="\[\033[0;32m\]"
YELLOW="\[\033[0;33m\]"
BLUE="\[\033[0;34m\]"
MAGENTA="\[\033[0;35m\]"
CYAN="\[\033[0;36m\]"
WHITE="\[\033[0;37m\]"
ONGREY="\[\033[0;40m\]"
ONRED="\[\033[0;41m\]"
ONGREEN="\[\033[0;42m\]"
ONYELLOW="\[\033[0;43m\]"
ONBLUE="\[\033[0;44m\]"
ONMAGENTA="\[\033[0;45m\]"
ONCYAN="\[\033[0;46m\]"
ONWHITE="\[\033[0;47m\]"

prompt_command () {
    # Capture exit code of last command.
    if [ $? -eq 0 ]; then
        STATUS=""
    else
        STATUS="${RED}${?}${RESET}:"
    fi

    BRANCH="\$(__git_ps1 ' î‚ %s')"

    # Show virtualenv if activated.
    if [[ $VIRTUAL_ENV != "" ]]; then
        VENV="$CYAN[${VIRTUAL_ENV##*/}]$RESET "
    else
        VENV=""
    fi

    PROMPT="$VENV"
    PROMPT+="$YELLOW\u$RESET@$GREEN\h$RESET:"
    PROMPT+="$STATUS"
    PROMPT+="$BLUE\W$RESET"
    PROMPT+="${RED}${BRANCH}${RESET}"
    PROMPT+="$GREEN\$$RESET "

    export PS1=$PROMPT
}

export PROMPT_COMMAND=prompt_command
